# -*- coding: utf-8 -*-
"""Helmet Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t-6uHHPTH5XqIA0V-xaLWrWENcjJRwun
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
import glob



# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/archive (1)

import xml.etree.ElementTree as ET
xml_ = glob.glob('./archive (1)/annotations/*.xml')
lst=[]
for data in xml_:
    with open(data) as f:
        d = f.read()
        xml_string = d


    root = ET.fromstring(xml_string)  # parse the XML string

    # iterate over all elements in the root
    for child in root:
        # access the object you're interested in by its tag
        if  child.tag == 'object' and (child.find('name').text == 'With Helmet'or child.find('name').text == 'Without Helmet'):
            # do something with the object...:
            lst.append(child.find('name').text)
            break

lst[:10]

# Commented out IPython magic to ensure Python compatibility.
# %ls

images=os.listdir('./archive (1)/images')
images=pd.DataFrame(images)
image=list(np.array(images).flatten())
image[:5]
lst[:5]

image_length = len(image)
image=image[:761]
print("Length of image", image_length)

# Check the length of lst
lst_length = len(lst)

lst = lst[:761]
print("Length of lst:", lst_length)

data = pd.DataFrame({'filename': image, 'classes': lst})
data

from tensorflow.keras.preprocessing.image import ImageDataGenerator
data_gen=ImageDataGenerator(rotation_range=0.2,zoom_range=0.2,
                           horizontal_flip=True,rescale=1/255)
data_gen.flow_from_dataframe(data,'./archive (1)/images',x_col='filename',y_col='classes',target_size=(100,100))

train_data=data_gen.flow_from_dataframe(data,'./archive (1)/images',x_col='filename',y_col='classes',target_size=(100,100))
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPool2D,Dense,Flatten

import tensorflow as tf
from keras.layers import Input, Dense
model=Sequential()
model.add(Conv2D(32,(3,3),input_shape=(120,120,3)))
model.add(MaxPool2D())
model.add(Conv2D(64,(3,3)))
model.add(MaxPool2D())
model.add(Conv2D(128,(3,3)))
model.add(MaxPool2D())
model.add(Conv2D(128,(3,3)))
model.add(MaxPool2D())
model.add(Conv2D(32,(3,3)))
model.add(MaxPool2D())
model.add(Flatten())
model.add(Dense(2,activation='softmax'))

model.compile(optimizer=tf.keras.optimizers.Adam(),loss='categorical_crossentropy',metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import load_img, img_to_array

def check(img_path):
    #img_path = '/home/eleensmathew/TrafficAnalysis/archive (1)/images/BikesHelmets18.png'
    img = load_img(img_path, target_size=(120, 120))
    img_array = img_to_array(img) / 255.0
    img_array = img_array.reshape((1,) + img_array.shape)

    # Make a prediction using the model
    pred1 = model.predict(img_array)

    # Print the predicted class
    if pred1[0][1] > 0.5:
        print('Helmet')
    else:
        print('No helmet')

    pred1

