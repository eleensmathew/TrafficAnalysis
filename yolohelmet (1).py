# -*- coding: utf-8 -*-
"""YoloHelmet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aTA2W70YKq6tAr9J7aXTmNZZ0w0qSYa9
"""

# Commented out IPython magic to ensure Python compatibility.
  # clone
# %cd yolov5
# %pip install -qr requirements.txt comet_ml  # install

import torch
import utils
display = utils.notebook_init()  # checks


# Commented out IPython magic to ensure Python compatibility.
#vuEJRGEcKHcw4NtTMN2PCuatt
#@title Select YOLOv5 ðŸš€ logger {run: 'auto'}
logger = 'Comet' #@param ['Comet', 'ClearML', 'TensorBoard']

if logger == 'Comet':
#   %pip install -q comet_ml
  import comet_ml; comet_ml.init()
elif logger == 'ClearML':
#   %pip install -q clearml
  import clearml; clearml.browser_login()
elif logger == 'TensorBoard':
#   %load_ext tensorboard
#   %tensorboard --logdir runs/train

import subprocess

command = "python train.py --img 320 --batch 8 --cache disk --epochs 3 --data '/content/gdrive/MyDrive/helmet320/data.yaml' --weights yolov5s.pt --cache"
subprocess.run(command, shell=True)


import cv2
import torch
from pathlib import Path
# Assuming your model is saved as 'best.pt' in the current directory
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/yolov5/runs/train/exp/weights/best.pt')

!python detect.py --weights /content/yolov5/runs/train/exp/weights/best.pt --img 320 --conf 0.25 --source /content/gdrive/MyDrive/helmet320/test/images/BikesHelmets100_png.rf.915e5fb579e68da1a24394690e230913.jpg --line-thickness 5 --hide-labels

from google.colab.patches import cv2_imshow
import cv2

# Read the image
img = cv2.imread('/content/yolov5/runs/detect/exp/BikesHelmets100_png.rf.915e5fb579e68da1a24394690e230913.jpg')

# Display the image
cv2_imshow(img)

def detect_and_draw_bboxes(image_path):
    # Load the image
    img = cv2.imread(image_path)
    print(f"Image shape after loading: {img.shape}")

    results = model(img)

    # Get detections
    detections = results.xyxy[0]  # xyxy format
    print(detections)

    # Draw bounding boxes
    for *box, conf, class_id in detections:
        if conf >= 0.1:  # Only draw boxes with confidence score above 0.5 (adjust threshold as needed)
            x_min, y_min, x_max, y_max = box
            print(box)
            class_label = model.names[int(class_id)]  # Get class label from model.names

            cv2.rectangle(img, (int(x_min), int(y_min)), (int(x_max), int(y_max)), (0, 255, 0), 2)  # Green for helmets
            cv2.putText(img, f"{class_label} ({conf:.2f})", (int(x_min), int(y_min) - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    return img
from google.colab.patches import cv2_imshow
image_path = '/content/gdrive/MyDrive/helmet320/test/images/BikesHelmets173_png.rf.8c1e661c67c83a54e913c60d06200682.jpg'  # Replace with your image path
img = cv2.imread(image_path)
num_channels = img.shape[2]
print(f"Image has {num_channels} channels.")
# Detect and draw bounding boxes
result_image = detect_and_draw_bboxes(image_path)
img = cv2.imread(image_path)

results = model(img)
print(results)
# Display the image with bounding boxes (optional)
cv2_imshow(result_image)

!python val.py --weights /content/yolov5/runs/train/exp/weights/best.pt --data '/content/gdrive/MyDrive/helmet320/data.yaml' --img-size 320
#!python detect.py --weights /content/yolov5/runs/train/exp/weights/best.pt --img 320 --conf 0.25 --source /content/gdrive/MyDrive/helmet320/test/images/BikesHelmets100_png.rf.915e5fb579e68da1a24394690e230913.jpg --line-thickness 5 --hide-labels